generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres_password@localhost:5433/postgres"
}

model User {
  id          String       @id @default(cuid())
  name        String?
  email       String       @unique
  password    String?
  role        Role         @default(STUDENT)
  studentId   String?
  isApproved  Boolean     @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courses     Course[]     @relation("CourseTeacher")
  enrollments Enrollment[]
  progress    Progress[]
  queries     Query[]
  registeredStudents PreRegistration[] @relation("RegisteredStudents")

  @@index([email])
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  teacherId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teacher     User         @relation("CourseTeacher", fields: [teacherId], references: [id])
  enrollments Enrollment[]
  modules     Module[]
}

model Module {
  id          String     @id @default(cuid())
  title       String
  description String
  order       Int
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     Content[]
  course      Course     @relation(fields: [courseId], references: [id])
  progress    Progress[]
  resources   Resource[]
}

model Content {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  fileUrl     String
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id])
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId])
}

model Progress {
  id        String   @id @default(cuid())
  studentId String
  moduleId  String
  status    String   @default("NOT_STARTED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@unique([studentId, moduleId])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  fileUrl     String
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id])
}

model Query {
  id          String      @id @default(cuid())
  title       String
  description String
  status      QueryStatus @default(OPEN)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
}

model PreRegistration {
  id          String   @id @default(cuid())
  studentId   String
  email       String
  registeredBy String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  registeredByUser User @relation("RegisteredStudents", fields: [registeredBy], references: [id])

  @@unique([studentId, email])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum QueryStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
